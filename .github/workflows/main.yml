name: Hprofile Actions

on:
  [push, workflow_dispatch]
env:
  AWS_REGION: us-east-1

jobs:
  Testing:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up Java 17
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      # 3. Run Maven Tests
      - name: Maven Test
        run: mvn test

      # 4. Run Checkstyle
      - name: Run Checkstyle
        run: mvn checkstyle:checkstyle

      # 5. Setup SonarQube
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      # 6. SonarQube Scan
      - name: SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Corretto_jdk/17.0.12-7.1/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Corretto_jdk/17.0.12-7.1/x64

      # 7. SonarQube Quality Gate check (Optional)
      - name: SonarQube Quality Gate check 
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

  BUILD_AND_PUBLISH:
    runs-on: ubuntu-latest
    steps:
          # 1. Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Update application.properties file
        run: |
          sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
          sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.RDS_PASS }}/" src/main/resources/application.properties
          sed -i "s/db01/${{ secrets.endpoint }}/" src/main/resources/application.properties

      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          registry: ${{ secrets.REGISTRY }}
          repo: app
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./